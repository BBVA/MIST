# Name: find-open-ports-by-domains
# Version: 2.0.0
# Description: Given a domain, find related domains and open ports in each domain.
# Tags: dnsrecon, nmap, network

# PROPOSAL
#import myLibrary

###########
# Library #
###########

function searchDomains(originDomain)  {
    r = exec("dnsrecon.py -d {originDomain} -t crt", False) {
        fields = strSplit(outputLine)
        isEqual(get(fields,1), "A") {
            send get(fields,2)
        }     
    }
    return r
}

function searchOpenS3Buckets(originDomain, dns) {
    r = exec ("festin {originDomain} --tor -ds {dns}", False) {
        if(strContains("Adding", outputLine)) {
            fields = strSplit(outputLine)
            send strSubstr(get(fields ,7), 1, -1)    
        }
    }
    return r
}

function findOpenPorts(ip, ports) {
    #sleep(2)
    r = exec("nmap -p {ports} --open {ip}", False) {
        fields = strSplit(outputLine)
        isGreater(len(fields),1) {
            isEqual(get(fields,1), "open") {
                openPort = get(fields,0)
                send "{ip}:{openPort}"
                print "SEND"
            }
        }     
    }
    return r
}


################
# Main Program #
################

function fooDomains(domain) {
    send domain
    sleep(1)
    send domain
}

data resultOpenPorts {
    domain
    ports
}

function FAKEfindOpenPorts(ip, ports) {
    #print "FAKE FIND OPEN PORT" ip
    send "{ip}:631/tcp"
    print "FAKE SEND OPEN PORT" "{ip}:631/tcp"
}

function printDomain(domain) {
    print domain
}

set domainProcessed <= []

function processDomain(domain) {
    print "PROCESSING" domain
    iterate domainProcessed => d {
        isEqual(d, domain) {
            print d "already proccesed"
            return
        }
    }
    listAppend(domainProcessed, domain)
    send domain
}

function saveFound(found) {
    print "SAVE FOUND" found
    s = strSplit(found,":")
    put get(s,0) get(s,1) => resultOpenPorts
    print resultOpenPorts
}

set domain <= "germanramos.com"
#searchDomains(domain) => domains
#searchOpenS3Buckets(domain, "212.166.64.1") => domains

fooDomains("localhost") => domains
fooDomains("127.0.0.1") => domains

processDomain(:domains) => nonRepeatedDomains
findOpenPorts(:nonRepeatedDomains, "631") => openPortsFound
saveFound(:openPortsFound)

sleep(6)
print "END"
